function J = calcJacobian(uGuess, wGuess, TGuess, uFreeNodes,wFreeNodes, TFreeNodes ,uRange, wRange,TRange)
global TensX TensZ divxx divzz divzx divxz A QT LM alpha beta nu rho penalty Gu Gw GT

s = max(size(uRange) + size(wRange) + size(TRange));

J = sparse(s,s);

J(uRange,uRange) = double(ttv(TensZ(uFreeNodes,wFreeNodes,uFreeNodes),wGuess,2) ...
                 + ttv(TensX(uFreeNodes,uFreeNodes,uFreeNodes), uGuess,2) ...
                 + ttv(TensX(uFreeNodes,uFreeNodes,uFreeNodes), uGuess,3)) ...
                 + penalty*divxx(uFreeNodes,uFreeNodes)/rho...
                 + nu*A(uFreeNodes,uFreeNodes);

J(uRange,wRange) = double(ttv(TensZ(uFreeNodes,wFreeNodes,uFreeNodes),uGuess,3))...
                 + penalty*divxz(uFreeNodes,wFreeNodes)/rho;

J(wRange,wRange) = double(ttv(TensX(wFreeNodes,uFreeNodes,wFreeNodes),uGuess,2) ...
                 + ttv(TensZ(wFreeNodes,wFreeNodes,wFreeNodes),wGuess,2) ...
                 + ttv(TensZ(wFreeNodes, wFreeNodes,wFreeNodes), wGuess,3)) ...
                 + penalty*divzz(wFreeNodes,wFreeNodes)/rho ...
                 + nu*A(wFreeNodes, wFreeNodes);

J(wRange,uRange) = double(ttv(TensX(wFreeNodes,uFreeNodes,wFreeNodes),wGuess,3))...
                   + penalty*divzx(wFreeNodes,uFreeNodes)/rho;

J(wRange,TRange) = LM(wFreeNodes,TFreeNodes);

J(TRange,TRange) = double(ttv(TensX(TFreeNodes,uFreeNodes,TFreeNodes),uGuess,2)...
                 + ttv(TensZ(TFreeNodes,wFreeNodes,TFreeNodes),wGuess,2)) ...
                 + alpha*A(TFreeNodes,TFreeNodes)+QT(TFreeNodes,TFreeNodes);

J(TRange,uRange) = double(ttv(TensX(TFreeNodes,uFreeNodes,TFreeNodes),TGuess,3));

J(TRange,wRange) = double(ttv(TensZ(TFreeNodes,wFreeNodes,TFreeNodes),TGuess,3));

